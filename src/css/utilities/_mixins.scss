@mixin style-placeholder($values...) {
  :-moz-placeholder, /* firefox 18- */
  ::-moz-placeholder, /* firefox 19+ */
  :-ms-input-placeholder,
  ::-webkit-input-placeholder,
  input[placeholder] {
    color: #f00;
    text-overflow: ellipsis;
  }

}

// Animations and keyframes
@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name {
    @content;
  }
  @-moz-keyframes $animation-name {
    @content;
  }
  @-ms-keyframes $animation-name {
    @content;
  }
  @-o-keyframes $animation-name {
    @content;
  }
  @keyframes $animation-name {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

// Usage
// @include keyframes(slide-down) {
//   0% { opacity: 1; }
//   90% { opacity: 0; }
// }

// .element {
//   width: 100px;
//   height: 100px;
//   background: black;
//   @include animation('slide-down 5s 3');
// }

// Transitions
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

// Usage
// a {
//   color: gray;
//   @include transition(color .3s ease);
//   &:hover {
//     color: black;
//   }
// }


// Source: http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/
@mixin svg-icon($name, $size:false) {
  background-image: url(#{$icon-svg-path}/#{$name}.svg);
  background-repeat: no-repeat;
  @if($size) {
    background-size: $size;
  } @else {
    background-size: cover;
  }

  .no-svg & {
    background-image: url(#{$icon-png-path}/#{$name}.#{$svg-fallback-extension});

    @media only screen and (-moz-min-device-pixel-ratio: 1.5),
      only screen and (-o-min-device-pixel-ratio: 3/2),
      only screen and (-webkit-min-device-pixel-ratio: 1.5),
      only screen and (min-device-pixel-ratio: 1.5) {
      background-image: url(#{$icon-png-path}/#{$name}#{$retina-suffix}.#{$svg-fallback-extension});
      background-repeat: no-repeat;
    }
  }
}

// Source: Using Rems with Sass
// http://davidensinger.com/2013/03/using-rems-with-sass/
@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $font-size: $font-base-size-unitless;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from font-size
      $new-rem-value: $value / $font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
      // % value given - don't add px or rem
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $px-values: "";
  $rem-values: "";

  @for $i from 1 through $max {
    $value: typecsset-strip-units(nth($values, $i));
    $px-values: #{$px-values + $value * $font-base-size-unitless}px;

    @if $i < $max {
      $px-values: #{$px-values + " "};
    }
  }

  @for $i from 1 through $max {
    $value: typecsset-strip-units(nth($values, $i));
    $rem-values: #{$rem-values + $value}rem;

    @if $i < $max {
      $rem-values: #{$rem-values + " "};
    }
  }

  #{$property}: $px-values;
  #{$property}: $rem-values;
}

@mixin img-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

// Media query mixin
// - Will probably need to be adjusted
//------------------------------------------------------------------------------

@mixin respond-to($media) {

  @if $media == retina {
    @media only screen and (-webkit-min-device-pixel-ratio: 2),
      only screen and (min--moz-device-pixel-ratio: 2),
      only screen and (-o-min-device-pixel-ratio: 2 / 1),
      only screen and (min-device-pixel-ratio: 2),
      only screen and (min-resolution: 192dpi),
      only screen and (min-resolution: 2dppx) {
      @content;
    }
  }
  @if $media == phone {
    @media only screen and (max-width: 550px) {
      @content;
    }
    @media screen and (device-aspect-ratio: 40 / 71) {
      @content;
    }
  }
  @if $media == landscape {
    @media only screen and (max-width: 680px) {
      @content;
    }
  }
  @else if $media == tablets {
    @media only screen and (max-width: 940px) {
      @content;
    }
  }
  @if $media == desktop {
    @media only screen and (max-width: 1020px) {
      @content;
    }
  }
  @if $media == large {
    @media only screen and (max-width: 1190px) {
      @content;
    }
  }
  @if $media == ios {
    @media only screen and (max-width: 1024px) and (orientation: landscape),
    only screen and (max-width: 1024px) and (orientation: portrait) {
      @content;
    }
  }
  @if $media == phone-invert {
    @media only screen and (min-width: 550px) {
      @content;
    }
    @media screen and (device-aspect-ratio: 40 / 71) {
      @content;
    }
  }
}


// Taken from Compass mixins

// Set all the colors for a link with one mixin call.
// Order of arguments is:
//
// 1. normal
// 2. hover
// 3. active
// 4. visited
// 5. focus
//
// Those states not specified will inherit.
// Mixin to an anchor link like so:
//     a
//       +link-colors(#00c, #0cc, #c0c, #ccc, #cc0)

@mixin link-colors(
  $normal,
  $hover: false,
  $active: false,
  $visited: false,
  $focus: false
  ) {
  color: $normal;
  @if $visited {
    &:visited {
      color: $visited;
    }
  }
  @if $focus {
    &:focus {
      color: $focus;
    }
  }
  @if $hover {
    &:hover {
      color: $hover;
    }
  }
  @if $active {
    &:active {
      color: $active;
    }
  }
}

// Absolute position elements
@mixin abs-pos (
  $top: auto,
  $right: auto,
  $bottom: auto,
  $left: auto
  ) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

